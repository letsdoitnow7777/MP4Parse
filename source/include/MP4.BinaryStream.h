/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

#ifndef _MP4_BINARY_STREAM_
#pragma once
#define _MP4_BINARY_STREAM_

#include "mp4.h"
#include "MP4.BinaryStream.h"

namespace MP4
{

    class IBinaryStream {
    public:
        virtual ~IBinaryStream()= default;

        virtual bool eof() const = 0;
        virtual std::istream & get( char * s, std::streamsize n ) = 0;
        virtual std::istream & ignore( std::streamsize n = 1, int delim = EOF ) = 0;
        virtual std::istream & read( char * s, std::streamsize n ) = 0;
    };

    class BinaryStream: public IBinaryStream
    {
    private:

    protected:
        std::ifstream stream;

    public:
        explicit BinaryStream(char * filename );
        ~BinaryStream() override;

        bool good() const;
        bool eof() const override;
        bool fail() const;
        bool bad() const;
        int peek();
        int get();
        int sync();
        std::streampos tellg();
        std::streamsize readsome( char * s, std::streamsize n );
        std::streamsize gcount() const;
        std::istream & get( char & c );
        std::istream & get( char * s, std::streamsize n ) override;
        std::istream & get( char * s, std::streamsize n, char delim );
        std::istream & get( std::streambuf & sb );
        std::istream & get( std::streambuf & sb, char delim );
        std::istream & getline(char * s, std::streamsize n );
        std::istream & getline(char * s, std::streamsize n, char delim );
        std::istream & ignore( std::streamsize n = 1, int delim = EOF ) override;
        std::istream & read( char * s, std::streamsize n ) override;
        std::istream & putback( char c );
        std::istream & unget();
        std::istream & seekg( std::streampos pos );
        std::istream & seekg( std::streamoff off, std::ios_base::seekdir dir );
        void clear();
    };

    class BinaryStreamBounded : public IBinaryStream{
    private:
        IBinaryStream * underlyingStream;
        int length;
        int availableBytes;
    public:
        BinaryStreamBounded(IBinaryStream *binaryStream, int len);

        bool eof() const override;
        std::istream & get( char * s, std::streamsize n ) override;
        std::istream & ignore( std::streamsize, int delim) override;
        std::istream & read( char * s, std::streamsize n ) override;
    };

    uint8_t readUnsignedChar(IBinaryStream* s);
    int8_t readSignedChar(IBinaryStream* s);

    uint16_t readUnsignedShort(IBinaryStream* s);
    int16_t readSignedShort(IBinaryStream* s);
    uint16_t readBigEndianUnsignedShort(IBinaryStream* s);
    uint16_t readLittleEndianUnsignedShort(IBinaryStream* s);

    uint32_t readUnsignedInteger(IBinaryStream* s);
    int32_t readSignedInteger(IBinaryStream* s);
    uint32_t readBigEndianUnsignedInteger(IBinaryStream* s);
    uint32_t readLittleEndianUnsignedInteger(IBinaryStream* s);

    uint64_t readUnsignedLong(IBinaryStream *s);
    int64_t readSignedLong(IBinaryStream* s);
    uint64_t readBigEndianUnsignedLong(IBinaryStream *s);
    uint64_t readLittleEndianUnsignedLong(IBinaryStream* s);

    float readFloat(IBinaryStream* s);
    double readDouble(IBinaryStream* s);

    float readBigEndianFixedPoint(IBinaryStream* s, unsigned int integerLength, unsigned int fractionalLength );
    float readLittleEndianFixedPoint(IBinaryStream* s, unsigned int integerLength, unsigned int fractionalLength );

    std::string * readBigEndianISO639Code(IBinaryStream* s);
    std::string * readNULLTerminatedString(IBinaryStream* s);
    std::string * readUTF8String(IBinaryStream* s);
    std::string * readLongUTF8String(IBinaryStream* s);

    void readMatrix(IBinaryStream* s, matrix * m );
}

#endif /* MP4_BINARY_STREAM_ */
