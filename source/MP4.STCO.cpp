/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

#include "MP4.STCO.h"

using namespace MP4;
          
STCO::STCO()
{
    this->_type.append( "STCO" );
}


void STCO::processData(MP4::IBinaryStream * stream, size_t length )
{
    this->_size = length;
    this->_dataLength = length;

    version = readUnsignedChar(stream);
    flags[0] = readUnsignedChar(stream);
    flags[1] = readUnsignedChar(stream);
    flags[2] = readUnsignedChar(stream);
    // fixme maybe order upper is wrong and we wanted 0->1->2

    numberOfEntries = readBigEndianUnsignedInteger(stream);
    chunkOffsets = new uint32_t [numberOfEntries];

    for (int i = 0; i < numberOfEntries; i++) {
        chunkOffsets[i] = readBigEndianUnsignedInteger(stream);
    }

}

std::string STCO::description() {
    std::string desc =  DataAtom::description();

    std::stringstream ss;
    ss << desc;
    ss << "version: " << version << "\t";
    ss << "flags: " << flags[0] << " " << flags[1] << " " << flags[2] << "\t";
    ss << "numberOfEntries: " << numberOfEntries << "\t";

    ss << "chunk offsets: ";
    for (int i = 0; i < std::min((int)numberOfEntries, 10); i++) {
        ss << i << ": " << chunkOffsets[i] << " ";
    }
    ss << "\n";
    return ss.str();
}
