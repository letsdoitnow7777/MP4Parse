/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

#include "MP4.STTS.h"

using namespace MP4;
          
STTS::STTS()
{
    this->_type.append( "STTS" );
}


void STTS::processData(MP4::IBinaryStream * stream, size_t length )
{
    this->_size = length;
    this->_dataLength = length;

    version = readUnsignedChar(stream);                     // 8  1
    flags[0] = readUnsignedChar(stream);                    // 8  1
    flags[1] = readUnsignedChar(stream);                    // 8  1
    flags[2] = readUnsignedChar(stream);                    // 8  1
    // fixme maybe order upper is wrong and we wanted 0->1->2

    numberOfEntries = readBigEndianUnsignedInteger(stream);  // 32 4
    sampleDuration = readBigEndianUnsignedInteger(stream);   // 32 4
    sampleCount = readBigEndianUnsignedInteger(stream);      // 32 4
    tableEntries = new uint32_t [numberOfEntries];

    for (int i = 0; i < numberOfEntries; i++) {
        tableEntries[i] = readBigEndianUnsignedInteger(stream);
    }

}


std::string STTS::description() {
    std::stringstream ss;
    std::string indent = countIndent();

    ss << indent << this->_type << "(DataAtom)" << "[" << _size << "bytes]"  << "str: " << _data << "\t";
    ss << "version: " << version << "\t";
    ss << "flags: " << flags[0] << " " << flags[1] << " " << flags[2] << "\t";
    ss << "numberOfEntries: " << numberOfEntries << "\t";
    ss << "sampleDuration: " << sampleDuration << "\t";
    ss << "sampleCount: " << sampleCount << "\t";

    ss << "I CAN COUNT DURATION: sampleDuration x sampleCount = " << sampleDuration << " x " << sampleCount << " = " << \
        sampleCount * sampleDuration << "\n";
//    ss << "entries: \n";
//    int sum = 0;
//    for (int i = 0; i < std::min((int)numberOfEntries, 400); i++) {
//        ss << i << ": " << tableEntries[i] << "\n";
//        sum += tableEntries[i];
//    }
//    ss << "sum: " << sum << "\n";

//    ss << "\n";
    return ss.str();
}

